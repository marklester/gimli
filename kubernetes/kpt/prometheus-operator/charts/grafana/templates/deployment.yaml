# Source: prometheus-operator/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-operator-grafana
  namespace: monitoring # {"$kpt-set":"namespace"}
  labels:
    helm.sh/chart: grafana-5.3.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: prometheus-operator
    app.kubernetes.io/version: "7.0.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: prometheus-operator
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: prometheus-operator
      annotations:
        checksum/config: 9ab47d665e57ad2b5666ab5a15e74eef9c4ab61f0c180ea68167d369d8e3c071
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 56f8ba97620c50787c64a64fc08d32138db83dba1d8d5a3d91d9dd9fa27b0138
        checksum/secret: a28402a874a4b43eb9190b57f4a2a1255a6dd13429ac23e299dbac1fe91e24cd
    spec:
      serviceAccountName: prometheus-operator-grafana
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      initContainers:
      - name: grafana-sc-datasources
        image: "kiwigrid/k8s-sidecar:0.1.151"
        imagePullPolicy: IfNotPresent
        env:
        - name: METHOD
          value: LIST
        - name: LABEL
          value: "grafana_datasource"
        - name: FOLDER
          value: "/etc/grafana/provisioning/datasources"
        - name: RESOURCE
          value: "both"
        resources: {}
        volumeMounts:
        - name: sc-datasources-volume
          mountPath: "/etc/grafana/provisioning/datasources"
      containers:
      - name: grafana-sc-dashboard
        image: "kiwigrid/k8s-sidecar:0.1.151"
        imagePullPolicy: IfNotPresent
        env:
        - name: METHOD
          value:
        - name: LABEL
          value: "grafana_dashboard"
        - name: FOLDER
          value: "/tmp/dashboards"
        - name: RESOURCE
          value: "both"
        resources: {}
        volumeMounts:
        - name: sc-dashboard-volume
          mountPath: "/tmp/dashboards"
      - name: image-renderer
        image: grafana/grafana-image-renderer:latest
        imagePullPolicy: Always
        env:
        - name: ENABLE_METRICS
          value: 'true'
      - name: grafana
        image: "grafana/grafana:latest" # {"$kpt-set":"grafana-image"}
        imagePullPolicy: Always
        volumeMounts:
        - name: config
          mountPath: "/etc/grafana/grafana.ini"
          subPath: grafana.ini
        - name: storage
          mountPath: "/var/lib/grafana"
        - name: sc-dashboard-volume
          mountPath: "/tmp/dashboards"
        - name: sc-dashboard-provider
          mountPath: "/etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml"
          subPath: provider.yaml
        - name: sc-datasources-volume
          mountPath: "/etc/grafana/provisioning/datasources"
        ports:
        - name: service
          containerPort: 80
          protocol: TCP
        - name: grafana
          containerPort: 3000
          protocol: TCP
        env:
        - name: GF_RENDERING_SERVER_URL
          value: http://localhost:8081/render
        - name: GF_RENDERING_CALLBACK_URL
          value: http://localhost:3000
        - name: GF_LOG_FILTERS
          value: rendering:debug
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: prometheus-operator-grafana
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: prometheus-operator-grafana
              key: admin-password
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources: {}
      volumes:
      - name: config
        configMap:
          name: prometheus-operator-grafana
      - name: storage
        nfs:
          server: gimli.home
          path: /appdata/grafana
      - name: sc-dashboard-volume
        emptyDir: {}
      - name: sc-dashboard-provider
        configMap:
          name: prometheus-operator-grafana-config-dashboards
      - name: sc-datasources-volume
        emptyDir: {}
